require 'yaml'
require 'erb'
require 'shellwords'

task :default => :ext

extensions = ['misc_utils']

desc "Compile C extensions"
task :ext => extensions.map {|ext| "ext/#{ext}/#{ext}_ext.so" }

extensions.each do |ext|
  file "ext/#{ext}/#{ext}_ext.so" => ["ext/#{ext}/Makefile", "ext/#{ext}/#{ext}_ext.c"] do
    Dir.chdir("ext/#{ext}") do
      sh("make")
    end
  end

  file "ext/#{ext}/Makefile" do
    Dir.chdir("ext/#{ext}") do
      sh("bundle exec ruby extconf.rb")
    end
  end
end

desc "Run tests"
task :test => :ext do
  sh("bundle exec ruby test/all_tests.rb")
end

desc "Clean built files"
task :clean do
  sh("rm -f ext/*/*.o ext/*/*.so ext/*/Makefile")
end

namespace :init do
  init_script_path = "/etc/init.d/tmc-sandbox"

  desc "Install init scripts. RVM-compatible."
  task :install do

    def rvm_info
      @rvm_info ||= begin          
        output = `rvm info 2>/dev/null` # We silence the "RVM is not a function" warning on stderr.
        potential_warning = "You need to change your terminal emulator preferences to allow login shell.\nSometimes it is required to use `/bin/bash --login` as the command.\nPlease visit https://rvm.io/integration/gnome-terminal/ for a example."    
        output = output.sub(potential_warning, '')
        YAML::load(output)   
      end    
    end

    rvm_current = `rvm current`
    if $?.success?
      puts "Using RVM."
      rvm_current.strip!
      ruby_path = rvm_info[rvm_current]['binaries']['ruby']
      env = rvm_info[rvm_current]['environment']
    else
      puts "Not using RVM. Don't forget rvmsudo if you use RVM."
      ruby_path = `which ruby`
      env = {}
    end

    def run_erb(template, webapp_dir, ruby_path, env)
      ERB.new(template).result(binding)
    end

    script = run_erb(File.read('initscript.erb'), File.absolute_path('.'), ruby_path, env)

    puts "Installing into #{init_script_path}"
    File.open(init_script_path, 'w') {|f| f.write(script) }
    sh("chmod a+x #{Shellwords.escape(init_script_path)}")

    puts "Setting to start/stop by default"
    sh("update-rc.d tmc-sandbox defaults 90 10")
  end

  desc "Uninstall init scripts."
  task :uninstall do
    sh("update-rc.d -f tmc-sandbox remove")
    if File.exist?(init_script_path)
      File.delete(init_script_path)
    else
      puts "#{init_script_path} doesn't exist."
    end
  end
end
